apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      initContainers:
      - name: wait-for-flask
        image: busybox
        command: ['sh', '-c', 'until nc -z flask 5000; do echo waiting for flask; sleep 2; done;']
      containers:
      - name: web
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  selector:
    app: web
  ports:
    - port: 80
      targetPort: 80
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      initContainers:
      - name: wait-for-mongo
        image: busybox
        command: ['sh', '-c', 'until nc -z mongodb 27017; do echo waiting for mongodb; sleep 2; done;']
      containers:
      - name: flask
        image: avic19/flask:latest
        ports:
        - containerPort: 5000
        env:
        - name: FLASK_APP
          value: app.py
        - name: FLASK_ENV
          value: development
        volumeMounts:
        - name: mongodb-secret
          mountPath: /run/secrets/mongodb_password
          subPath: mongodb_password.txt
          readOnly: true
        - name: api-key-secret
          mountPath: /run/secrets/apiKey
          subPath: apiKey.txt
          readOnly: true
      volumes:
      - name: mongodb-secret # kubectl create secret generic mongodb-secret --from-file=mongodb_password.txt
        secret:
          secretName: mongodb-secret
      - name: api-key-secret # kubectl create secret generic api-key --from-file=apiKey.txt
        secret:
          secretName: api-key

---
apiVersion: v1
kind: Service
metadata:
  name: flask
spec:
  selector:
    app: flask
  ports:
    - port: 5000
      targetPort: 5000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: avic19/mongodb:latest
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: mongodb
        - name: MONGO_INITDB_ROOT_PASSWORD_FILE
          value: /run/secrets/mongodb_password
        - name: MONGO_INITDB_DATABASE
          value: movies
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-secret
          mountPath: /run/secrets/mongodb_password
          subPath: mongodb_password.txt
          readOnly: true
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: mongodb-secret
        secret:
          secretName: mongodb-secret

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postfix
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postfix
  template:
    metadata:
      labels:
        app: postfix
    spec:
      containers:
      - name: postfix
        image: juanluisbaptiste/postfix
        ports:
        - containerPort: 25
        envFrom:
        - secretRef:
            name: postfix-secret # kubectl create secret generic postfix-secret --from-env-file=postfix.env

---
apiVersion: v1
kind: Service
metadata:
  name: postfix
spec:
  selector:
    app: postfix
  ports:
    - port: 25
      targetPort: 25

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: default
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://flask:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /data {
            proxy_pass http://flask:5000/data;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /movies/ {
            proxy_pass http://flask:5000/movies/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /login {
            proxy_pass http://flask:5000/login;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /reminder {
            proxy_pass http://flask:5000/reminder;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi